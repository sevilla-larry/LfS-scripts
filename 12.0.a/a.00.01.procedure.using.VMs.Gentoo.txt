A. Preparation

  A.01. Prepare a Gentoo VM (LFS) host with:

        Q35, UEFI
        50Gb VM.Gentoo.host.qcow2       /dev/vda
        Install Gentoo x64 with UEFI
        ( Big topic )

        /etc/portage/package.mask
          >sys-devel/gcc-13.2
        ( requirement of LFS 12.0 )

  A.02. [LFS 2.2] execute: bash a.02.02.version-check.sh

        (based on https://www.linuxfromscratch.org/lfs/view/12.0/chapter02/hostreqs.html )
        check the corresponding versions

        shut down Gentoo VM (LFS) host

  A.03. attach 2 Virtual Disk

        1.      20Gb      VM.LfS.sys.qcow2        /dev/vdb
        2.       5Gb      VM.LfS.src.qcow2        /dev/vdc
        3. (RAM*2)Gb      VM.LfS.swp.qcow2        /dev/vdd    ( will be used after installation )

  A.04. [LFS 2.4] Partition the newly attached VDs

        set as GPT ( UEFI )

        /dev/vdb1   256M      VFAT / UEFI / EFI System
        /dev/vdb2   remaining Linux filesystem

        /dev/vdc1   all       Linux filesystem

        /dev/vdd1   all       swap

  A.05. [LFS 2.5] Creating File Systems on the Partitions

        ###
        # execute as root user
        ###

        ###

        mkfs.vfat -v -F 32 -n BOOT /dev/vdb1
        mkfs.ext4 -v -L ROOT /dev/vdb2
        mkfs.ext4 -v -L SOURCES /dev/vdc1
        mkswap -L SWAP /dev/vdd1

        ###

  A.06. [LFS 2.6] Setting the $LFS variable

        ###
        export LFS=/mnt/lfs
        ###

  A.07. [LFS 2.7] Mounting the New Partition

        ###

        mkdir -pv $LFS
        mount -v -t ext4 /dev/vdb2 $LFS

        ###

        /etc/fstab
          /dev/vdb2   /mnt/lfs  ...

  A.08. [LFS 3.1] Packages ( Sources )

        ###

        mkdir -pv $LFS/mnt/src
        mount /dev/vdc1 $LFS/mnt/src

        mkdir -v $LFS/mnt/src/lfs.{src,log}

        chmod -v a+wt $LFS/mnt/src/lfs.{src,log}

        ln -sf $LFS/mnt/src/lfs.src $LFS/sources

        cd $LFS/sources

        ###

        ( download wget-list & md5sums )

        ###

        wget --input-file=wget-list-sysv --continue --directory-prefix=$LFS/sources
        md5sum -c md5sums

        ###

  A.09. Copy all script files and Download additional Packages

        copy all script files to $LFS/sources

        ###

        wget --input-file=a.03.01.wget-list-sysv.additional.txt --continue --directory-prefix=$LFS/sources

        ###

  A.10. [LFS 4.2] Creating a limited directory layout in LFS filesystem

        ###

        mkdir -pv $LFS/{etc,var} $LFS/usr/{bin,lib,sbin}

        for i in bin lib sbin; do
          ln -sv usr/$i $LFS/$i
        done

        case $(uname -m) in
          x86_64) mkdir -pv $LFS/lib64 ;;
        esac

        mkdir -pv $LFS/tools

        ###

  A.11. [LFS 4.3] Adding the LFS user

        ###

        groupadd lfs
        useradd -s /bin/bash -g lfs -m -k /dev/null lfs

        passwd lfs

        chown -v lfs $LFS/{usr{,/*},lib,var,etc,bin,sbin,tools}
        case $(uname -m) in
          x86_64) chown -v lfs $LFS/lib64 ;;
        esac

        ###

        chown -v lfs:lfs $LFS/sources
        chown -v lfs:lfs $LFS/sources/*

        ###

        ( Logging )

        mkdir -pv $LFS/var/log
        chown -v lfs $LFS/var/log
        chown -v lfs $LFS/mnt/src/lfs.log
        ln -sfv $LFS/mnt/src/lfs.log $LFS/var/log/lfs

        export LFSLOG=$LFS/var/log/lfs

        ###

  A.12. [LFS 4.3] Start a shell running as user "lfs"

        ###
        su - lfs
        ###

  A.13. [LFS 4.4] Setting Up the Environment
        ( Note: change the MAKEFLAGS based on the number of threads )

        $$$
        $ execute as lfs user
        $$$

        $$$

        cat > ~/.bash_profile << "EOF"
        exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash
        EOF

        cat > ~/.bashrc << "EOF"
        set +h
        umask 022
        LFS=/mnt/lfs
        LFSLOG=/mnt/lfs/var/log/lfs
        LC_ALL=POSIX
        LFS_TGT=$(uname -m)-lfs-linux-gnu
        MAKEFLAGS='-j8'
        PATH=/usr/bin
        if [ ! -L /bin ]; then PATH=/bin:$PATH; fi
        PATH=$LFS/tools/bin:$PATH
        CONFIG_SITE=$LFS/usr/share/config.site
        export LFS LFSLOG LC_ALL LFS_TGT MAKEFLAGS PATH CONFIG_SITE
        EOF

        source ~/.bash_profile

        $$$

B.  Generate LFS

  B.01. [LFS pre-5] General Compilation Instructions / Checking Environment

        $$$

        echo $LFS             /mnt/lfs
        echo $LFSLOG          /mnt/lfs/var/log/lfs
        echo $MAKEFLAGS       -j8

        echo $SHELL           /bin/bash
        ls -l /bin/sh         bash
        ls -l /usr/bin/awk    gawk
        ls -l /usr/bin/yacc   yacc.bison

        cd $LFS/sources

        $$$

        ( display )
        lfs@VMGentooHostname /mnt/lfs/sources $

  B.02. [LFS 5.x & 6.x] Chapter 5 & 6

        $$$

        bash a.05.00.sh
        bash a.06.00.sh

        $$$

  B.03. [LFS 7.2] Exit as lfs user and login as root

        $$$
        exit
        $$$

  B.04. [LFS 7.2] Change Ownership to root

        ( check environment should be )

        ###

        echo $LFS             /mnt/lfs

        ###

        chown -R root:root $LFS/{usr,lib,var,etc,bin,sbin,tools}
        case $(uname -m) in
          x86_64) chown -R root:root $LFS/lib64 ;;
        esac

        ###

  B.05. [LFS 7.3] Preparing Virtual Kernel File Systems

        ###

        mkdir -pv $LFS/{dev,proc,sys,run}

        mount -v --bind /dev $LFS/dev

        mount -v --bind /dev/pts $LFS/dev/pts
        mount -vt proc proc $LFS/proc
        mount -vt sysfs sysfs $LFS/sys
        mount -vt tmpfs tmpfs $LFS/run

        if [ -h $LFS/dev/shm ]; then
          mkdir -pv $LFS/$(readlink $LFS/dev/shm)
        else
          mount -t tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm
        fi

        ###

  B.06. [LFS 7.4] Entering the Chroot Environment
        ( Note: change the MAKEFLAGS based on the number of threads )

        ###

        chroot "$LFS" /usr/bin/env -i   \
            HOME=/root                  \
            TERM="$TERM"                \
            PS1='(lfs chroot) \u:\w\$ ' \
            PATH=/usr/bin:/usr/sbin     \
            /bin/bash --login

        export MAKEFLAGS="-j8"

        ###

  B.07. [LFS 7.5] Creating Directories

        ###

        mkdir -pv /{boot,home,mnt,opt,srv}

        mkdir -pv /etc/{opt,sysconfig}
        mkdir -pv /lib/firmware
        mkdir -pv /media/{floppy,cdrom}
        mkdir -pv /usr/{,local/}{include,src}
        mkdir -pv /usr/local/{bin,lib,sbin}
        mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
        mkdir -pv /usr/{,local/}share/{misc,terminfo,zoneinfo}
        mkdir -pv /usr/{,local/}share/man/man{1..8}
        mkdir -pv /var/{cache,local,log,mail,opt,spool}
        mkdir -pv /var/lib/{color,misc,locate}

        ln -sfv /run /var/run
        ln -sfv /run/lock /var/lock

        install -dv -m 0750 /root
        install -dv -m 1777 /tmp /var/tmp

        ###

  B.08. [LFS 7.6] Creating Essential Files and Symlinks

        ###

        ln -sv /proc/self/mounts /etc/mtab


        cat > /etc/hosts << EOF
        127.0.0.1  localhost $(hostname)
        ::1        localhost
        EOF


        cat > /etc/passwd << "EOF"
        root:x:0:0:root:/root:/bin/bash
        bin:x:1:1:bin:/dev/null:/usr/bin/false
        daemon:x:6:6:Daemon User:/dev/null:/usr/bin/false
        messagebus:x:18:18:D-Bus Message Daemon User:/run/dbus:/usr/bin/false
        uuidd:x:80:80:UUID Generation Daemon User:/dev/null:/usr/bin/false
        nobody:x:65534:65534:Unprivileged User:/dev/null:/usr/bin/false
        EOF


        cat > /etc/group << "EOF"
        root:x:0:
        bin:x:1:daemon
        sys:x:2:
        kmem:x:3:
        tape:x:4:
        tty:x:5:
        daemon:x:6:
        floppy:x:7:
        disk:x:8:
        lp:x:9:
        dialout:x:10:
        audio:x:11:
        video:x:12:
        utmp:x:13:
        usb:x:14:
        cdrom:x:15:
        adm:x:16:
        messagebus:x:18:
        input:x:24:
        mail:x:34:
        kvm:x:61:
        uuidd:x:80:
        wheel:x:97:
        users:x:999:
        nogroup:x:65534:
        EOF


        echo "tester:x:101:101::/home/tester:/bin/bash" >> /etc/passwd
        echo "tester:x:101:" >> /etc/group
        install -o tester -d /home/tester

        exec /usr/bin/bash --login
        ( I have no name! ) - removed

        touch /var/log/{btmp,lastlog,faillog,wtmp}
        chgrp -v utmp /var/log/lastlog
        chmod -v 664  /var/log/lastlog
        chmod -v 600  /var/log/btmp

  B.09. [before LFS 7.7] Adjust links and checking environment

        ###

        rm /sources
        ln -s /mnt/src/lfs.src /sources

        rm /var/log/lfs
        ln -sf /mnt/src/lfs.log /var/log/lfs

        export LFSLOG=/var/log/lfs

        cd /sources

        ###

        echo $LFSLOG          /var/log/lfs
        echo $MAKEFLAGS       -j8

        echo $SHELL           /bin/bash
        ls -l /bin/sh         bash
        ls -l /usr/bin/awk    gawk

  B.10. [LFS 7.7-7.12] Chapter 7

        ###

        bash a.07.00.sh

        ###

  B.11. [LFS 8.03-8.26] Chapter 8 Part 1

        ###

        bash a.08.00.Part1.03-26.sh

        ###

  B.12. [LFS 8.26.2 & 8.26.3] Configuring Shadow & Setting the Root password

        ###

        pwconv

        grpconv

        mkdir -p /etc/default
        useradd -D --gid 999

        ###

        passwd root

        ###

  B.13. [LFS 8.27-8.35] Chapter 8 Part 2

        ###

        bash a.08.00.Part2.27-35.sh

        ###

  B.14. [LFS 8.35] run the newly compiled BASH program

        ###

        exec /usr/bin/bash --login

        ###

  B.15. [LFS 8.36-8.80] Chapter 8 Part 3

        ###

        bash a.08.00.Part3.36-80.sh

        ###

  B.16. [LFS 8.62] Chapter 8 Part 4 GRUB
        ( based on: https://www.linuxfromscratch.org/blfs/view/12.0/postlfs/grub-efi.html )

        ###

        bash a.08.00.Part4.90-90Y.sh

        ###

  B.17. Additional Applications needed - WGet

        ###

        bash a.08.00.Part5.91-91Z.sh

        ###

  B.18. Additional Applications needed - misc

        ###

        bash a.08.00.Part6.92-92E.sh

        ###

C. Finishing Up

  C.01. [LFS 9.2] LFS-Bootscripts

        ###

        cd /sources

        bash a.09.02.LFS-Bootscripts-20230728.sh

        ###

  C.02. [LFS 9.5] General Network Configuration
         ( change the network, hostname appropriately )


        ###

        cd /etc/sysconfig/


        cat > ifconfig.eth0 << "EOF"
        ONBOOT=yes
        IFACE=eth0
        SERVICE=ipv4-static
        IP=192.168.122.111
        GATEWAY=192.168.122.1
        PREFIX=24
        BROADCAST=192.168.122.255
        EOF


        cat > /etc/resolv.conf << "EOF"
        # Begin /etc/resolv.conf

        # domain <Your Domain Name>
        # nameserver <IP address of your primary nameserver>
        # nameserver <IP address of your secondary nameserver>

        nameserver 192.168.1.1
        nameserver 8.8.8.8

        # End /etc/resolv.conf
        EOF


        echo "VM-LFS" > /etc/hostname


        cat > /etc/hosts << "EOF"
        # Begin /etc/hosts

        127.0.0.1 localhost.localdomain localhost
        # 127.0.1.1 <FQDN> <HOSTNAME>
        # <192.168.1.1> <FQDN> <HOSTNAME> [alias1] [alias2 ...]
        ::1       localhost ip6-localhost ip6-loopback
        ff02::1   ip6-allnodes
        ff02::2   ip6-allrouters

        # End /etc/hosts
        EOF

        ###

  C.03. Make - Certificate Authority
        ( execute after 9.5 General Network Configuration )
        ( if there's NO net, Start networking )

        ###
        /usr/sbin/make-ca -g
        ###

  C.04. [LFS 9.6] System V Bootscript Usage and Configuration

        ###

        cat > /etc/inittab << "EOF"
        # Begin /etc/inittab

        id:3:initdefault:

        si::sysinit:/etc/rc.d/init.d/rc S

        l0:0:wait:/etc/rc.d/init.d/rc 0
        l1:S1:wait:/etc/rc.d/init.d/rc 1
        l2:2:wait:/etc/rc.d/init.d/rc 2
        l3:3:wait:/etc/rc.d/init.d/rc 3
        l4:4:wait:/etc/rc.d/init.d/rc 4
        l5:5:wait:/etc/rc.d/init.d/rc 5
        l6:6:wait:/etc/rc.d/init.d/rc 6

        ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now

        su:S06:once:/sbin/sulogin
        s1:1:respawn:/sbin/sulogin

        1:2345:respawn:/sbin/agetty --noclear tty1 9600
        2:2345:respawn:/sbin/agetty tty2 9600
        3:2345:respawn:/sbin/agetty tty3 9600
        4:2345:respawn:/sbin/agetty tty4 9600
        5:2345:respawn:/sbin/agetty tty5 9600
        6:2345:respawn:/sbin/agetty tty6 9600

        # End /etc/inittab
        EOF


        cat > /etc/sysconfig/clock << "EOF"
        # Begin /etc/sysconfig/clock

        UTC=1

        # Set this to any options you might need to give to hwclock,
        # such as machine hardware clock type for Alphas.
        CLOCKPARAMS=

        # End /etc/sysconfig/clock
        EOF

        ###

        ( modify /etc/sysconfig/rc.site, if needed )

  C.05. [LFS 9.8] /etc/inputrc

        ###

        cat > /etc/inputrc << "EOF"
        # Begin /etc/inputrc
        # Modified by Chris Lynn <roryo@roryo.dynup.net>

        # Allow the command prompt to wrap to the next line
        set horizontal-scroll-mode Off

        # Enable 8-bit input
        set meta-flag On
        set input-meta On

        # Turns off 8th bit stripping
        set convert-meta Off

        # Keep the 8th bit for display
        set output-meta On

        # none, visible or audible
        set bell-style none

        # All of the following map the escape sequence of the value
        # contained in the 1st argument to the readline specific functions
        "\eOd": backward-word
        "\eOc": forward-word

        # for linux console
        "\e[1~": beginning-of-line
        "\e[4~": end-of-line
        "\e[5~": beginning-of-history
        "\e[6~": end-of-history
        "\e[3~": delete-char
        "\e[2~": quoted-insert

        # for xterm
        "\eOH": beginning-of-line
        "\eOF": end-of-line

        # for Konsole
        "\e[H": beginning-of-line
        "\e[F": end-of-line

        # End /etc/inputrc
        EOF

        ###

  C.06. [LFS 9.9] /etc/shells

        ###

        cat > /etc/shells << "EOF"
        # Begin /etc/shells

        /bin/sh
        /bin/bash

        # End /etc/shells
        EOF

        ###

  C.07. BLFS-Bootscripts

        ###

        cd /sources

        bash a.09.99.BLFS-Bootscripts-20230824.extract.only.sh

        cd blfs-bootscripts-20230824

        ###

  C.08. GPM bootscripts

        ###

        make install-gpm

        ###

  C.09. OpenSSH bootscripts


        ###

        make install-sshd

        ###

#  C.10. acpid bootscripts
#
#        ###
#           Possible conflict with
#           elogind
#
#        make install-acpid
#
#        ###

D. [LFS 10.x] Making the LFS System Bootable

  D.01. [LFS 10.2] /etc/fstab

        ###

        cat > /etc/fstab << "EOF"
        # Begin /etc/fstab

        # file system  mount-point  type     options             dump  fsck
        #                                                              order

        #/dev/<xxx>     /            <fff>    defaults            1     1
        #/dev/<yyy>     swap         swap     pri=1               0     0

        /dev/vda1       /boot/efi   vfat  defaults,noatime,discard      0 2
        /dev/vda2       /           ext4  noatime,discard               0 1

        /dev/vdb1       /mnt/src    ext4  noatime,discard               0 3

        /dev/vdc1       none        swap  sw,discard                    0 0

        /dev/cdrom      /mnt/cdrom  auto  noauto,user                   0 0

        proc           /proc          proc     nosuid,noexec,nodev 0     0
        sysfs          /sys           sysfs    nosuid,noexec,nodev 0     0
        devpts         /dev/pts       devpts   gid=5,mode=620      0     0
        tmpfs          /run           tmpfs    defaults            0     0
        devtmpfs       /dev           devtmpfs mode=0755,nosuid    0     0
        tmpfs          /dev/shm       tmpfs    nosuid,nodev        0     0
        cgroup2        /sys/fs/cgroup cgroup2  nosuid,noexec,nodev 0     0

        # End /etc/fstab
        EOF

        ###

        mkdir /mnt/cdrom

        ###


  D.02. [LFS 10.3] Linux-6.4.12 Kernel

        ###

        cd /sources

        bash a.10.03.Linux-6.4.12.extract.only.sh

        cd linux-6.4.12

        make mrproper
        make defconfig
        make MENUCONFIG_COLOR=blackbg menuconfig

        ( Note the flags needed )
        https://www.linuxfromscratch.org/lfs/view/12.0/chapter10/kernel.html
        https://www.linuxfromscratch.org/blfs/view/12.0/postlfs/grub-setup.html
        https://www.linuxfromscratch.org/blfs/view/12.0/general/gpm.html
        https://wiki.gentoo.org/wiki/QEMU/Linux_guest
        https://www.linuxfromscratch.org/blfs/view/12.0/x/mesa.html
        https://www.linuxfromscratch.org/blfs/view/12.0/x/xorg-server.html
        https://www.linuxfromscratch.org/blfs/view/12.0/x/x7driver.html#libevdev
        https://www.linuxfromscratch.org/blfs/view/12.0/general/elogind.html
        
        ( additional )
        Kernel hacking --->
          Memory Debugging
            [ ] Stack Utilitization Instrumentation

        make
        make modules_install

        cp -iv arch/x86/boot/bzImage /boot/vmlinuz-6.4.12-lfs-12.0-r00
        cp -iv System.map /boot/System.map-6.4.12-lfs-12.0-r00
        cp -iv .config /boot/config-6.4.12-lfs-12.0-r00

        cp -r Documentation -T /usr/share/doc/linux-6.4.12

        ###

  D.03. [LFS 10.4] Using GRUB to Set Up the Boot Process with UEFI
        ( https://www.linuxfromscratch.org/blfs/view/12.0/postlfs/grub-setup.html )

        ###

        mkdir -pv /boot/efi
        mount -v -t vfat /dev/vdb1 /boot/efi

        grub-install --target=x86_64-efi --removable


        cat > /boot/grub/grub.cfg << EOF
        # Begin /boot/grub/grub.cfg
        set default=0
        set timeout=5

        insmod part_gpt
        insmod ext2
        set root=(hd0,2)

        insmod all_video
        if loadfont /boot/grub/fonts/unicode.pf2; then
          terminal_output gfxterm
        fi

        menuentry "GNU/Linux, Linux 6.4.12-lfs-12.0-r00"  {
          linux   /boot/vmlinuz-6.4.12-lfs-12.0-r00 root=/dev/vda2 ro
        }

        menuentry "Firmware Setup" {
          fwsetup
        }
        EOF

        ###

E. The End

  E.01. [LFS 11.1] The End

        ###

        echo 12.0 > /etc/lfs-release


        cat > /etc/lsb-release << "EOF"
        DISTRIB_ID="Linux From Scratch"
        DISTRIB_RELEASE="12.0"
        DISTRIB_CODENAME="<your name here>"
        DISTRIB_DESCRIPTION="Linux From Scratch"
        EOF


        cat > /etc/os-release << "EOF"
        NAME="Linux From Scratch"
        VERSION="12.0"
        ID=lfs
        PRETTY_NAME="Linux From Scratch 12.0"
        VERSION_CODENAME="<your name here>"
        EOF

        ###

  E.02. Adding user

        # substitute <user> with the desired username

        ###

        useradd -m -G users,wheel,audio,cdrom,usb,video -s /bin/bash <user>

        passwd <user>

        ###

  E.03. Clean Up

        # Based on:
        #
        #   https://www.linuxfromscratch.org/lfs/view/12.0/chapter08/stripping.html
        #   https://www.linuxfromscratch.org/lfs/view/12.0/chapter08/cleanup.html
        #
        #   https://www.linuxfromscratch.org/blfs/view/12.0/introduction/notes-on-building.html
        #   https://www.linuxfromscratch.org/blfs/view/12.0/introduction/la-files.html
        #   https://www.linuxfromscratch.org/blfs/view/12.0/introduction/locale-issues.html
        #

        ###

        cd /sources

        bash a.12.00.sh

        ###

  E.04. Bash shell

        Read and execute, if needed, as root, initially.
        For files that start with "~", execute also with <user>.

        https://www.linuxfromscratch.org/blfs/view/12.0/postlfs/profile.html

  E.05. [LFS 11.3] UnMounting

        ###

        logout

        umount -v $LFS/dev/pts
        mountpoint -q $LFS/dev/shm && umount -v $LFS/dev/shm
        umount -v $LFS/dev
        umount -v $LFS/run
        umount -v $LFS/proc
        umount -v $LFS/sys

        umount -v $LFS/mnt/src

        umount -v $LFS

        poweroff         ( --- the VM Gentoo Host )

        ###

  E.06. Detach the 3 VDs from host

F. Create a new VM for LFS and run it
      VM.LFS.sys.qcow2 as vda
      VM.LFS.src.qcow2 as vdb
      VM.LFS.swp.qcow2 as vdc
